/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package autoimage;

import ij.IJ;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import mmcorej.CMMCore;

/**
 *
 * @author Karsten
 */
public class RefPointListDialog extends javax.swing.JDialog {

    private CMMCore core;
    private AcquisitionLayout acqLayout;
    private ArrayList<RefArea> rpList;
    private ArrayList<RefArea> rpBackup;
    private String xyStageName;
    private String zStageName;
   // private boolean landmarkFound;
    private LayoutPanel acqLayoutPanel;
    private boolean modified;
    
    public RefPointListDialog(java.awt.Frame parent, CMMCore core, AcquisitionLayout aLayout, LayoutPanel acqLP) {
        super(parent, false);
        this.core=core;
        acqLayout=aLayout;
        acqLayoutPanel=acqLP;
        initComponents();
        setRefPointList(acqLayout.getLandmarks());
        refPointTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);        
        ListSelectionModel lsm = refPointTable.getSelectionModel();
        lsm.addListSelectionListener(new SharedListSelectionHandler());
        refPointTable.setSelectionModel(lsm);
        try {
            xyStageName=core.getXYStageDevice();
            zStageName=core.getFocusDevice();
            double stageX=core.getXPosition(xyStageName);
            double stageY=core.getYPosition(xyStageName);
            double stageZ=core.getPosition(zStageName);
            stageXPosLabel.setText(Double.toString(stageX));
            stageYPosLabel.setText(Double.toString(stageY));
            stageZPosLabel.setText(Double.toString(stageZ));            
        } catch (Exception ex) {
            Logger.getLogger(RefPointListDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultTableModel model=(DefaultTableModel) refPointTable.getModel();
        model.addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                DefaultTableModel model=(DefaultTableModel)refPointTable.getModel();
                if (e.getType() == TableModelEvent.UPDATE & e.getColumn()==4 & e.getFirstRow()==0) {
                    double refLayoutX=(Double)model.getValueAt(0, 4);
                    double refStageX=(Double)model.getValueAt(0, 1);
                    for (int i=1; i<model.getRowCount(); i++) {
                        double sX=(Double)model.getValueAt(i, 1);
                        model.setValueAt(refLayoutX+sX-refStageX,i,4);
                    }
                    for (int i=0; i<model.getRowCount(); i++)
                        rpList.get(i).setLayoutCoordX((Double)model.getValueAt(i,4));
                } else if (e.getType() == TableModelEvent.UPDATE & e.getColumn()==5 & e.getFirstRow()==0) {
                    double refLayoutY=(Double)model.getValueAt(0, 5);
                    double refStageY=(Double)model.getValueAt(0, 2);
                    for (int i=1; i<model.getRowCount(); i++) {
                        double sY=(Double)model.getValueAt(i, 2);
                        model.setValueAt(refLayoutY+sY-refStageY,i,5);
                    }
                    for (int i=0; i<model.getRowCount(); i++)
                        rpList.get(i).setLayoutCoordY((Double)model.getValueAt(i,5));
                } else if (e.getType() == TableModelEvent.UPDATE & e.getColumn()==6) {
                    rpList.get(e.getFirstRow()).setLayoutCoordZ((Double)model.getValueAt(e.getFirstRow(),6));
                }
                modified=true;
                acqLayoutPanel.repaint();
            }
        });
        modified=false;
        setAlwaysOnTop(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        refPointTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        stageXPosLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        stageYPosLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        stageZPosLabel = new javax.swing.JLabel();
        moveToButton = new javax.swing.JButton();
        updateStagePosButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Set Landmarks");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        refPointTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Stage X", "Stage Y", "Stage Z", "Layout X", "Layout Y", "Layout Z"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(refPointTable);

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("-");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Current Stage Position X:");

        stageXPosLabel.setText("jLabel2");

        jLabel2.setText("Current Stage Position Y:");

        stageYPosLabel.setText("jLabel2");

        jLabel3.setText("Current Stage Position Z:");

        stageZPosLabel.setText("jLabel2");

        moveToButton.setText("Move to");
        moveToButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToButtonActionPerformed(evt);
            }
        });

        updateStagePosButton.setText("Update Stage Pos");
        updateStagePosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStagePosButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(addButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(moveToButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(updateStagePosButton)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(layout.createSequentialGroup()
                                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(stageXPosLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(okButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(stageZPosLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(stageYPosLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cancelButton)))
                        .add(74, 74, 74)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addButton)
                    .add(removeButton)
                    .add(moveToButton)
                    .add(updateStagePosButton))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(stageXPosLabel)
                    .add(okButton))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(stageYPosLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(stageZPosLabel)))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(cancelButton)))
                .add(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static ArrayList<RefArea> cloneRefPointList(ArrayList<RefArea> rpl) {
        ArrayList<RefArea> clonedList = new ArrayList<RefArea>(rpl.size());
        for (RefArea rp : rpl) {
            clonedList.add(new RefArea(rp));
        }
        return clonedList;
    }
    
    public void updateStagePos(double x, double y, double z) {
        stageXPosLabel.setText(String.format("%1$,.2f",x));
        stageYPosLabel.setText(String.format("%1$,.2f",y));
        stageZPosLabel.setText(String.format("%1$,.2f",z));
    }
    
    private void updateStagePosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStagePosButtonActionPerformed
        int row=refPointTable.getSelectedRow();
        if (row>=0) {
            DefaultTableModel model=(DefaultTableModel)refPointTable.getModel();
            try {
                double stageX=core.getXPosition(xyStageName);
                double stageY=core.getYPosition(xyStageName);
                double stageZ=core.getPosition(zStageName);
                boolean newPos=true;
                int index=-1;
                for (int i=0; i<model.getRowCount(); i++)
                    if (i!=row & Math.round((Double)model.getValueAt(i,1))==Math.round(stageX) & Math.round((Double)model.getValueAt(i,2))==Math.round(stageY)) {
                        newPos=false;
                        index=i;
                    }    
                if (!newPos) {
/*                    IJ.showMessage("Redundant Stage Position");
                    model.removeRow(index);
                    RefArea removedRefArea = rpList.remove(index);
                    row=refPointTable.getSelectedRow();
*/              
                    JOptionPane.showMessageDialog(this, "A Reference Point is already defined for this stage position!");   
                    return;
                }
                RefArea rp=rpList.get(row);
                double deltaSX=stageX-rpList.get(row).getStageCoordX();
                double deltaSY=stageY-rpList.get(row).getStageCoordY();
/*                rp.setStageCoord(stageX, stageY, stageZ);
*/              model.setValueAt(new Double(stageX),row,1);
                model.setValueAt(new Double(stageY),row,2);
                model.setValueAt(new Double(stageZ),row,3);
//                stageXPosLabel.setText(Double.toString(stageX));
//                stageYPosLabel.setText(Double.toString(stageY));
//                stageZPosLabel.setText(Double.toString(stageZ));

              
                RefArea rp2;
                if (row==0) {
                    Object[] options = {"Adjust Layout Position",
                    "Keep Layout Position",};
                    int n = JOptionPane.showOptionDialog(null,"Adjusting the stage position for this reference point.\n\n"
                        + "Do you want to adjust the layout position for this reference point accordingly,\n"
                        + "or do you want to keep the current layout position?",
                        "Adjusting Stage Position for Reference Point: "+rpList.get(row).getName(),
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[1]);
                    double refLayoutX=rp.getLayoutCoordX();
                    double refLayoutY=rp.getLayoutCoordY();
                    if (n==0) {
                        rp.setLayoutCoordX(refLayoutX+deltaSX);
                        rp.setLayoutCoordY(refLayoutY+deltaSY);
                        model.setValueAt(rp.getLayoutCoordX(),0,4);
                        model.setValueAt(rp.getLayoutCoordY(),0,5);   
                    } else {
                        for (int i=row+1; i<model.getRowCount(); i++) {
                            rp2=rpList.get(i);
                            rp2.setLayoutCoord(refLayoutX+rp2.getStageCoordX()-stageX, refLayoutY+rp2.getStageCoordY()-stageY, rp2.getLayoutCoordZ());
                            model.setValueAt(new Double(rp2.getLayoutCoordX()),i,4);
                            model.setValueAt(new Double(rp2.getLayoutCoordY()),i,5);
                        }
                    }
                } else {
                    RefArea rp0=rpList.get(0);
                    rp.setLayoutCoord(rp0.getLayoutCoordX()+stageX-rp0.getStageCoordX(), rp0.getLayoutCoordY()+stageY-rp0.getStageCoordY(), rp.getLayoutCoordZ());
                    model.setValueAt(new Double(rp.getLayoutCoordX()),row,4);
                    model.setValueAt(new Double(rp.getLayoutCoordY()),row,5);
                }   
                rp.setStageCoord(stageX, stageY, stageZ);
/*                model.setValueAt(new Double(stageX),row,1);
                model.setValueAt(new Double(stageY),row,2);
                model.setValueAt(new Double(stageZ),row,3);*/
                ((AcqFrame)getParent()).setLandmarkFound(model.getRowCount() > 0);
                acqLayoutPanel.getAcqLayout().calcNormalVector();
                acqLayoutPanel.repaint();
                modified=true;
            } catch (Exception ex) {
                Logger.getLogger(RefPointListDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else
            JOptionPane.showMessageDialog(this, "No Reference Point selected.");
    }//GEN-LAST:event_updateStagePosButtonActionPerformed

    private void moveToButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToButtonActionPerformed
        int row=refPointTable.getSelectedRow();
        if (row>=0) {
            DefaultTableModel model=(DefaultTableModel)refPointTable.getModel();
            try {
                double stageX=(Double)model.getValueAt(row,1);
                double stageY=(Double)model.getValueAt(row,2);
                double stageZ=(Double)model.getValueAt(row,3);
                core.waitForDevice(zStageName);
                core.setPosition(zStageName,acqLayoutPanel.getAcqLayout().getEscapeZPos());
                core.waitForDevice(xyStageName);
                core.setXYPosition(xyStageName, stageX, stageY);
                core.waitForDevice(zStageName);
                core.setPosition(zStageName,stageZ);
//                stageXPosLabel.setText(Double.toString(stageX));
//                stageYPosLabel.setText(Double.toString(stageY));
//                stageZPosLabel.setText(Double.toString(stageZ));            
                acqLayoutPanel.repaint();
            } catch (Exception ex) {
                Logger.getLogger(RefPointListDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else
            JOptionPane.showMessageDialog(this, "No Reference Point selected.");
    }//GEN-LAST:event_moveToButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        DefaultTableModel model=(DefaultTableModel)refPointTable.getModel();
        if (model.getRowCount()>=3) {
            JOptionPane.showMessageDialog(this, "Cannot create more than three Reference Points.");
            return;
        }    
        try {
            double stageX=core.getXPosition(xyStageName);
            double stageY=core.getYPosition(xyStageName);
            double stageZ=core.getPosition(zStageName);
            RefArea newRP;
            if (model.getRowCount()>0) {
                RefArea rp0=rpList.get(0);
                newRP=new RefArea("Landmark", stageX, stageY, stageZ, rp0.getLayoutCoordX()+stageX-rp0.getStageCoordX(),rp0.getLayoutCoordY()+stageY-rp0.getStageCoordY(),0, rp0.getPhysWidth(), rp0.getPhysHeight(), "" );
            } else {
                newRP=new RefArea("Landmark", stageX, stageY, stageZ, 0,0,0, core.getPixelSizeUm()*core.getImageWidth(),core.getPixelSizeUm()*core.getImageHeight(), "" );    
                newRP.setStagePosFound(true);
            }
            newRP.setStagePosFound(true);
            rpList.add(newRP);
            model.addRow(new Object[]{
                    newRP.getName(),
                    newRP.getStageCoordX(),
                    newRP.getStageCoordY(),
                    newRP.getStageCoordZ(),
                    newRP.getLayoutCoordX(),
                    newRP.getLayoutCoordY(),
                    newRP.getLayoutCoordZ()
            });
            updateStagePos(stageX, stageY, stageZ);
            //change setLandmarkFound flag in AcqFrame and acqLayout 
            ((AcqFrame)getParent()).setLandmarkFound(model.getRowCount() > 0);
            acqLayoutPanel.getAcqLayout().calcNormalVector();
            acqLayoutPanel.repaint();
            modified=true;
        } catch (Exception ex) {
            Logger.getLogger(RefPointListDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        acqLayoutPanel.getAcqLayout().setLandmarks(rpBackup); //calls calcNormalVector()
        acqLayoutPanel.getAcqLayout().deselectAllLandmarks();
        acqLayoutPanel.repaint();
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        acqLayoutPanel.getAcqLayout().calcNormalVector();
        acqLayoutPanel.getAcqLayout().deselectAllLandmarks();
        acqLayoutPanel.repaint();
        if (modified) 
            acqLayout.setModified(true);
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int row=refPointTable.getSelectedRow();
        if (row>=0) {
            DefaultTableModel model=(DefaultTableModel)refPointTable.getModel();
            model.removeRow(row);
            RefArea removedRefArea = rpList.remove(row);
            row=refPointTable.getSelectedRow();
            
            //change setLandmarkFound flag in AcqFrame and acqLayout 
            if (refPointTable.getRowCount() < 1) {
                ((AcqFrame)getParent()).setLandmarkFound(false);
            }    
            acqLayoutPanel.getAcqLayout().calcNormalVector();
            acqLayoutPanel.repaint();
            modified=true;
        }            
    }//GEN-LAST:event_removeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int answer = JOptionPane.showConfirmDialog(this, "Do you want to keep the modified Landmark definitions?","", JOptionPane.YES_NO_OPTION);
        if (answer==JOptionPane.NO_OPTION) {
            acqLayoutPanel.getAcqLayout().setLandmarks(rpBackup);
        }
        acqLayoutPanel.getAcqLayout().deselectAllLandmarks();
//        dispose();
        acqLayoutPanel.repaint();
    }//GEN-LAST:event_formWindowClosing

    
    public void closeDialog() {
        acqLayoutPanel.getAcqLayout().deselectAllLandmarks();
        WindowEvent wev = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        this.dispatchEvent(wev);
    }    
    /**
     * @param args the command line arguments
     */
    
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/*        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RefPointListDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RefPointListDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RefPointListDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RefPointListDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
    /*    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RefPointListDialog dialog;
                dialog = new RefPointListDialog(new javax.swing.JFrame(), core, rpList);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton moveToButton;
    private javax.swing.JButton okButton;
    private javax.swing.JTable refPointTable;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel stageXPosLabel;
    private javax.swing.JLabel stageYPosLabel;
    private javax.swing.JLabel stageZPosLabel;
    private javax.swing.JButton updateStagePosButton;
    // End of variables declaration//GEN-END:variables

    void setRefPointList(ArrayList<RefArea> rpl) {
        rpList=rpl;
        rpBackup=cloneRefPointList(rpl);    
        DefaultTableModel model=(DefaultTableModel) refPointTable.getModel();
        int r=model.getRowCount();
        for (int i=r-1; i>=0; i--)
            model.removeRow(i);
        if (rpl!=null) {
            for (int i=0; i<rpl.size(); i++) {
                RefArea rp=rpl.get(i);
                model.addRow(new Object[]{
                    rp.getName(),
                    rp.getStageCoordX(),
                    rp.getStageCoordY(),
                    rp.getStageCoordZ(),
                    rp.getLayoutCoordX(),
                    rp.getLayoutCoordY(),
                    rp.getLayoutCoordZ()
                });
            }            
        }
    }

    

    class SharedListSelectionHandler implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {  
                ListSelectionModel lsm = (ListSelectionModel)e.getSource();
 
//                int firstIndex = e.getFirstIndex();
/*                int lastIndex = e.getLastIndex();
                boolean isAdjusting = e.getValueIsAdjusting(); 
                IJ.log("Event for indexes "
                          + firstIndex + " - " + lastIndex
                          + "; isAdjusting is " + isAdjusting
                          + "; selected indexes:");
 */
                for (int i=0; i< rpList.size(); i++)
                    rpList.get(i).setSelected(false);
                if (!lsm.isSelectionEmpty()) {
                    rpList.get(lsm.getMinSelectionIndex()).setSelected(true);
//                    int maxIndex = lsm.getMaxSelectionIndex();
                }
                acqLayoutPanel.repaint();
         }   
    }
}
